function downsample_init_xblock(blk, varargin)

defaults = {'dec_rate', 3, ...
    'input_clk_rate', 1};

dec_rate = get_var('dec_rate', 'defaults', defaults, varargin{:});
input_clk_rate = get_var('input_clk_rate', 'defaults', defaults, varargin{:});


%% inports
inport = xInport('In');

%% outports
outport = xOutport('Out');

%% diagram

% block: Constant
Constant_out = xSignal;
Constant = xBlock(struct('source', 'Constant', 'name', 'Constant'), ...
                         struct('const',0,...
                         'explicit_period', 'on', ...
                         'period', input_clk_rate), ...
                         {}, ...
                         {Constant_out});

% block: Counter
Counter_out = xSignal;
Counter = xBlock(struct('source', 'Counter', 'name', 'Counter1'), ...
                         struct('cnt_type', 'Count Limited', ...
                                'cnt_to', 0, ...
                                'cnt_by_val', 1, ...
                                'operation', 'Down', ...
                                'n_bits', 18, ...
                                'bin_pt', 0, ...
                                'start_count', dec_rate-1,...
                                'period', input_clk_rate), ...
                         {}, ...
                         {Counter_out});

% block: my_downsample/downsample_init_xblock/Register
Relational_out = xSignal;
Register = xBlock(struct('source', 'Register', 'name', 'Register'), ...
                         struct('en', 'on'), ...
                         {inport, Relational_out}, ...
                         {outport});

% block: my_downsample/downsample_init_xblock/Relational
Relational = xBlock(struct('source', 'Relational', 'name', 'Relational'), ...
                           [], ...
                           {Counter_out, Constant_out}, ...
                           {Relational_out});


if ~isempty(blk) && ~strcmp(blk(1),'/')
    clean_blocks(blk);
end
end

