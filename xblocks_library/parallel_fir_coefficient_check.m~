function check = parallel_fir_coefficient_check(filter_coeffs)
f0=filter_coeffs(1:2:end);
f1=filter_coeffs(2:2:end);

f0pf1=f0+f1;

check = 0;

% validate coefficients
f0_round = round(f0 * 1e16) * 1e-16;
if mod(length(f0)/4,1) ~= 0,
    errordlg('The number of coefficients must be integer multiples of the number of inputs');
    check = 1;
    return;
end
num_fir_col = length(f0)/4;
if f0_round(1:int32(length(f0)/2)) == f0_round(length(f0):-1:int32(length(f0)/2)+1)
    num_fir_col = num_fir_col / 2;
end
if num_fir_col <= 0
    errordlg(['error: the number of column must be a positive integer. num_fir_col = ', num2str(num_fir_col)]);
    check = 1;
    return;
end

f1_round = round(f1 * 1e16) * 1e-16;
if mod(length(f1)/4,1) ~= 0,
    disp('The number of coefficients must be integer multiples of the number of inputs');
    return;
end
num_fir_col = length(f1)/4;
if f1_round(1:int32(length(f1)/2)) == f1_round(length(f1):-1:int32(length(f1)/2)+1)
    num_fir_col = num_fir_col / 2;
end
if num_fir_col <= 0
    disp(['error: the number of column must be a positive integer. num_fir_col = ', num2str(num_fir_col)]);
    return;
end

f0pf1_round = round(f0pf1 * 1e16) * 1e-16;
if mod(length(f0pf1)/4,1) ~= 0,
    disp('The number of coefficients must be integer multiples of the number of inputs');
    return;
end
num_fir_col = length(f0pf1)/4;
disp(num_fir_col);
if f0pf1_round(1:int32(length(f0pf1)/2)) == f0pf1_round(length(f0pf1):-1:int32(length(f0pf1)/2)+1)
    num_fir_col = num_fir_col / 2;
end
if num_fir_col <= 0
    disp(['error: the number of column must be a positive integer. num_fir_col = ', num2str(num_fir_col)]);
    return;
end
end