function add_en_init_xblock(varargin)
defaults = { ...
    'din0_bin_pt', 0, ...
    'din1_bin_pt', 0, ...
    'out_bit_width', 32, ...
    'signed', 0, ...
    'use_dsp48', 1, ...
    'latency', 2, ...
    };

din0_bin_pt = get_var('din0_bin_pt', 'defaults', defaults, varargin{:});
din1_bin_pt = get_var('din1_bin_pt', 'defaults', defaults, varargin{:});
out_bit_width = get_var('out_bit_width', 'defaults', defaults, varargin{:});
signed = get_var('signed', 'defaults', defaults, varargin{:});
use_dsp48 = get_var('use_dsp48', 'defaults', defaults, varargin{:});
latency = get_var('latency', 'defaults', defaults, varargin{:});
if signed
    arith_type ='Signed  (2''s comp)';
else
    arith_type ='Unsigned';
end
    
in_bin_pt = max(din0_bin_pt, din1_bin_pt);

%% inports
din0 = xInport('din0');
din1 = xInport('din1');
en = xInport('en');

%% outports
dout = xOutport('dout');


if use_dsp48
    opmode_z_out1 = xSignal;
    opmode_x_out1 = xSignal;
    opmode_out = xSignal;
    opmode = xBlock(struct('source', 'Concat', 'name', 'Concat'), ...
                           struct('num_inputs', 4), ...
                           {opmode_z_out1, en, en, opmode_x_out1}, ...
                           {opmode_out});
    
    % block: untitled1/add_en_dsp48_init_xblock/Convert
    din0_sign_ext = xSignal;
    din0_sign_extender = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
                            struct('n_bits', 48, ...
                                   'bin_pt', in_bin_pt), ...
                            {din0}, ...
                            {din0_sign_ext});
    
    % block: untitled1/add_en_dsp48_init_xblock/Convert2
    reinterp_din1_out1 = xSignal;
    Convert2_out1 = xSignal;
    Convert2 = xBlock(struct('source', 'Convert', 'name', 'Convert2'), ...
                             struct('n_bits', 48, ...
                                    'bin_pt', 0), ...
                             {reinterp_din1_out1}, ...
                             {Convert2_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/DSP48E
    reinterp_a_out1 = xSignal;
    reinterp_b_out1 = xSignal;
    alumode_out1 = xSignal;
    carryin_out1 = xSignal;
    carryinsel_out1 = xSignal;
    dsp48_dout = xSignal;
    DSP48E = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E'), ...
                           struct('use_creg', 'on'), ...
                           {reinterp_a_out1, reinterp_b_out1, Convert2_out1, opmode_out, alumode_out1, carryin_out1, carryinsel_out1}, ...
                           {dsp48_dout});
    
    % Reinterpret the binary point of the DSP output
    reinterp_dsp_out = xSignal;                   
    reinterp_dsp = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_dsp_out'), ...
                                 struct('force_arith_type', 'on', ...
                                        'arith_type', 'Signed  (2''s comp)', ...
                                        'bin_pt', in_bin_pt), ...
                                 {dsp48_dout}, ...
                                 {reinterp_dsp_out});
    
    % Cast the DSP48 output to the requested number of bits
    conv_dsp_out = xBlock(struct('source', 'Convert', 'name', 'conv_dsp_out'), ...
                            struct('n_bits', out_bit_width, 'arith_type', arith_type, ...
                                   'bin_pt', in_bin_pt), ...
                            {reinterp_dsp_out}, ...
                            {dout});
                        
    % block: untitled1/add_en_dsp48_init_xblock/reinterp_a
    a_out1 = xSignal;
    reinterp_a = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_a'), ...
                                 struct('force_arith_type', 'on', ...
                                        'arith_type', 'Signed  (2''s comp)'), ...
                                 {a_out1}, ...
                                 {reinterp_a_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/reinterp_b
    b_out1 = xSignal;
    reinterp_b = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_b'), ...
                                 struct('force_arith_type', 'on', ...
                                        'arith_type', 'Signed  (2''s comp)'), ...
                                 {b_out1}, ...
                                 {reinterp_b_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/reinterp_din1
    reinterp_din1 = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_din1'), ...
                                 struct('arith_type', 'Signed  (2''s comp)', ...
                                        'force_bin_pt', 'on'), ...
                                 {din1}, ...
                                 {reinterp_din1_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/a
    a = xBlock(struct('source', 'Slice', 'name', 'a'), ...
                      struct('nbits', 30, ...
                             'mode', 'Lower Bit Location + Width', ...
                             'bit0', 18), ...
                      {din0_sign_ext}, ...
                      {a_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/alumode
    alumode = xBlock(struct('source', 'Constant', 'name', 'alumode'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 0, ...
                                   'n_bits', 4, ...
                                   'bin_pt', 0, ...
                                   'explicit_period', 'on'), ...
                            {}, ...
                            {alumode_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/b
    b = xBlock(struct('source', 'Slice', 'name', 'b'), ...
                      struct('nbits', 18, ...
                             'mode', 'Lower Bit Location + Width'), ...
                      {din0_sign_ext}, ...
                      {b_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/carryin
    carryin = xBlock(struct('source', 'Constant', 'name', 'carryin'), ...
                            struct('arith_type', 'Unsigned', ...
                                   'const', 0, ...
                                   'n_bits', 1, ...
                                   'bin_pt', 0, ...
                                   'explicit_period', 'on'), ...
                            {}, ...
                            {carryin_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/carryinsel
    carryinsel = xBlock(struct('source', 'Constant', 'name', 'carryinsel'), ...
                               struct('arith_type', 'Unsigned', ...
                                      'const', 0, ...
                                      'n_bits', 3, ...
                                      'bin_pt', 0, ...
                                      'explicit_period', 'on'), ...
                               {}, ...
                               {carryinsel_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/opmode_x
    opmode_x = xBlock(struct('source', 'Constant', 'name', 'opmode_x'), ...
                             struct('arith_type', 'Unsigned', ...
                                    'const', 3, ...
                                    'n_bits', 2, ...
                                    'bin_pt', 0, ...
                                    'explicit_period', 'on'), ...
                             {}, ...
                             {opmode_x_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/opmode_z
    opmode_z = xBlock(struct('source', 'Constant', 'name', 'opmode_z'), ...
                             struct('arith_type', 'Unsigned', ...
                                    'const', 0, ...
                                    'n_bits', 3, ...
                                    'bin_pt', 0, ...
                                    'explicit_period', 'on'), ...
                             {}, ...
                             {opmode_z_out1});
else
    en_bool = xSignal;
    en_conv = xBlock(struct('source', 'Convert', 'name', 'en_conv'), ...
        struct('arith_type', 'Boolean'), {en}, {en_bool} );
    
    dummy_din1 = xSignal;   
    dummy_din1_const = xBlock( struct('source', 'Constant', 'name', 'dummy_din1'), ...
        struct('arith_type', arith_type, 'n_bits', out_bit_width
    
    add_din1 = xSignal;
    din1_sel = xBlock(struct('source', 'Mux', 'name', 'din1_sel'), ...
        {}, {en_bool, dummy_din1, din1}, {add_din1});
    
    AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ... 
                           struct('latency', latency, ... 
                                  'precision', 'User Defined', ... 
                                  'arith_type', arith_type, ...
                                  'n_bits', out_bit_width, ... 
                                  'bin_pt', in_bin_pt), ... 
                           {din0, add_din1}, ... 
                           {dout});

end
    


end

