function dsp48_human_init_xblock(varargin)
% A human-friendly DSP48E block for common arithmetic tasks
% NOTE:
% This block is not at all complete
% TODO:
% - add parameters for pipleine length
% - automatically figure out binary point for reinterp_dsp_out



defaults = {...
	'opmode_val', 0, ...
	'alumode_val', 0, ...
	'carryin_val', 0, ...
	'carryinsel_val', 0, ...
	'two_48_bit_inputs', 0, ...
	'bit_width_out', 32, ...
	'bin_pt_out', 0, ...
    'arith_type', 0, ...
};
	
opmode_val = get_var('opmode_val', 'defaults', defaults, varargin{:});
alumode_val = get_var('alumode_val', 'defaults', defaults, varargin{:});
carryin_val = get_var('carryin_val', 'defaults', defaults, varargin{:});
carryinsel_val = get_var('carryinsel_val', 'defaults', defaults, varargin{:});
two_48_bit_inputs = get_var('two_48_bit_inputs', 'defaults', defaults, varargin{:});
bit_width_out = get_var('bit_width_out', 'defaults', defaults, varargin{:});
bin_pt_out = get_var('bin_pt_out', 'defaults', defaults, varargin{:});
arith_type = get_var('arith_type', 'defaults', defaults, varargin{:});

if arith_type
    arith_type ='Signed  (2''s comp)';
    const_arith_type = 'Signed (2''s comp)';
else
    arith_type ='Unsigned';
    const_arith_type = 'Unsigned';
end

%% inports
din1 = xInport('din1');
din2 = xInport('din2');
if isempty(opmode_val)
	opmode = xInport('opmode');
else
	opmode = xSignal;
	xBlock(struct('source', 'Constant', 'name', 'opmode'), ...
				  struct('arith_type', 'Unsigned', 'const', opmode_val, 'n_bits', 7, ...
						 'bin_pt', 0, 'explicit_period', 'on'), {}, {opmode});		
end

% create alumode
if isempty(alumode_val)
	alumode = xInport('alumode');
else
	alumode = xSignal;
	xBlock(struct('source', 'Constant', 'name', 'alumode'), ...
				  struct('arith_type', 'Unsigned', 'const', alumode_val, 'n_bits', 4, ...
						 'bin_pt', 0, 'explicit_period', 'on'), {}, {alumode});	
end

% create carryin
if isempty(carryin_val)
	carryin = xInport('carryin');
else
	carryin = xSignal;
	xBlock(struct('source', 'Constant', 'name', 'carryin'), ...
				  struct('arith_type', 'Unsigned', 'const', carryin_val, 'n_bits', 1, ...
						 'bin_pt', 0, 'explicit_period', 'on'), {}, {carryin});	
end

% create carryinsel
if isempty(carryinsel_val)
	carryinsel = xInport('carryinsel');
else
	carryinsel = xSignal;
	xBlock(struct('source', 'Constant', 'name', 'carryinsel'), ...
				  struct('arith_type', 'Unsigned', 'const', carryinsel_val, 'n_bits', 3, ...
						 'bin_pt', 0, 'explicit_period', 'on'), {}, {carryinsel});		
end


%% outports
dout = xOutport('dout');

%% diagram

% block: untitled/Subsystem/dsp48_human_init_xblock/Convert
Convert_out1 = xSignal;
reinterp_din1_out1 = xSignal;
Convert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
                        struct('n_bits', 48, ...
                               'bin_pt', 0), ...
                        {reinterp_din1_out1}, ...
                        {Convert_out1});

% block: untitled/Subsystem/dsp48_human_init_xblock/Convert2
reinterp_din2_out1 = xSignal;
Convert2_out1 = xSignal;
Convert2 = xBlock(struct('source', 'Convert', 'name', 'Convert2'), ...
                         struct('n_bits', 48, ...
                                'bin_pt', 0), ...
                         {reinterp_din2_out1}, ...
                         {Convert2_out1});

% block: untitled/Subsystem/dsp48_human_init_xblock/DSP48E
reinterp_a_out1 = xSignal;
reinterp_b_out1 = xSignal;
alumode_out1 = xSignal;
carryin_out1 = xSignal;
carryinsel_out1 = xSignal;
DSP48E_out1 = xSignal;
DSP48E = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E'), ...
                       struct('use_creg', 'on'), ...
                       {reinterp_a_out1, reinterp_b_out1, Convert2_out1, ...
                       	opmode, alumode, carryin, carryinsel}, ...
                       {DSP48E_out1});

% block: untitled/Subsystem/dsp48_human_init_xblock/a
a_out1 = xSignal;
a = xBlock(struct('source', 'Slice', 'name', 'a'), ...
                  struct('nbits', 30, ...
                         'mode', 'Lower Bit Location + Width', ...
                         'bit0', 18), ...
                  {Convert_out1}, ...
                  {a_out1});


% block: untitled/Subsystem/dsp48_human_init_xblock/b
b_out1 = xSignal;
b = xBlock(struct('source', 'Slice', 'name', 'b'), ...
                  struct('nbits', 18, ...
                         'mode', 'Lower Bit Location + Width'), ...
                  {Convert_out1}, ...
                  {b_out1});



% block: untitled/Subsystem/dsp48_human_init_xblock/conv_dsp_out
reinterp_dsp_out_out1 = xSignal;
conv_dsp_out = xBlock(struct('source', 'Convert', 'name', 'conv_dsp_out'), ...
                             struct('arith_type', 'Unsigned', ...
                                    'n_bits', bit_width_out, ...
                                    'bin_pt', bin_pt_out), ...
                             {reinterp_dsp_out_out1}, ...
                             {dout});

% block: untitled/Subsystem/dsp48_human_init_xblock/reinterp_a
reinterp_a = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_a'), ...
                           struct('force_arith_type', 'on', ...
                                  'arith_type', 'Signed  (2''s comp)'), ...
                           {a_out1}, ...
                           {reinterp_a_out1});

% block: untitled/Subsystem/dsp48_human_init_xblock/reinterp_b
reinterp_b = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_b'), ...
                           struct('force_arith_type', 'on', ...
                                  'arith_type', 'Signed  (2''s comp)'), ...
                           {b_out1}, ...
                           {reinterp_b_out1});

% block: untitled/Subsystem/dsp48_human_init_xblock/reinterp_din2
reinterp_din2 = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_din2'), ...
                              struct('arith_type', 'Signed  (2''s comp)', ...
                                     'force_bin_pt', 'on'), ...
                              {din2}, ...
                              {reinterp_din2_out1});
                          
% block: untitled/Subsystem/dsp48_human_init_xblock/reinterp_din2
reinterp_din1 = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_din1'), ...
                              struct('arith_type', 'Signed  (2''s comp)', ...
                                     'force_bin_pt', 'on', ...
                                     'bin_pt', 0), ...
                              {din1}, ...
                              {reinterp_din1_out1});                          
                          

% block: untitled/Subsystem/dsp48_human_init_xblock/reinterp_dsp_out
reinterp_dsp_out = xBlock(struct('source', 'Reinterpret', 'name', 'reinterp_dsp_out'), ...
                                 struct('force_arith_type', 'on', ...
                                        'force_bin_pt', 'on', ...
                                        'arith_type', arith_type, ...
                                        'bin_pt', bin_pt_out), ...
                                 {DSP48E_out1}, ...
                                 {reinterp_dsp_out_out1});



end

