function add_en_init_xblock(varargin)
defaults = { ...
    'din0_bin_pt', 0, ...
    'din1_bin_pt', 0, ...
    'bit_width_out', 32, ...
    'signed', 0, ...
    'use_dsp48', 1, ...
    'latency', 2, ...
    };

din0_bin_pt = get_var('din0_bin_pt', 'defaults', defaults, varargin{:});
din1_bin_pt = get_var('din1_bin_pt', 'defaults', defaults, varargin{:});
bit_width_out = get_var('bit_width_out', 'defaults', defaults, varargin{:});
signed = get_var('signed', 'defaults', defaults, varargin{:});
use_dsp48 = get_var('use_dsp48', 'defaults', defaults, varargin{:});
latency = get_var('latency', 'defaults', defaults, varargin{:});
if signed
    arith_type ='Signed  (2''s comp)';
    const_arith_type = 'Signed (2''s comp)';
else
    arith_type ='Unsigned';
    const_arith_type = 'Unsigned';
end
    
in_bin_pt = max(din0_bin_pt, din1_bin_pt);

%% inports
din0 = xInport('din0');
din1 = xInport('din1');
en = xInport('en');

%% outports
dout = xOutport('dout');


if use_dsp48
    opmode_z_out1 = xSignal;
    opmode_x_out1 = xSignal;
    opmode_out = xSignal;
    opmode = xBlock(struct('source', 'Concat', 'name', 'Concat'), ...
                           struct('num_inputs', 4), ...
                           {opmode_z_out1, en, en, opmode_x_out1}, ...
                           {opmode_out});
    
    % block: untitled1/add_en_dsp48_init_xblock/opmode_x
    opmode_x = xBlock(struct('source', 'Constant', 'name', 'opmode_x'), ...
                             struct('arith_type', 'Unsigned', ...
                                    'const', 3, ...
                                    'n_bits', 2, ...
                                    'bin_pt', 0, ...
                                    'explicit_period', 'on'), ...
                             {}, ...
                             {opmode_x_out1});
    
    % block: untitled1/add_en_dsp48_init_xblock/opmode_z
    opmode_z = xBlock(struct('source', 'Constant', 'name', 'opmode_z'), ...
                             struct('arith_type', 'Unsigned', ...
                                    'const', 0, ...
                                    'n_bits', 3, ...
                                    'bin_pt', 0, ...
                                    'explicit_period', 'on'), ...
                             {}, ...
                             {opmode_z_out1});
                             
                             
	adder_config.source = str2func('dsp48_human_init_xblock');
	adder_config.name = 'dynamic_adder';
	adder_params = {'opmode_val', '', 'two_48_bit_inputs', 0, 'bit_width_out', bit_width_out, ...
		'bin_pt_out', in_bin_pt};
	xBlock( adder_config, adder_params, {din0, din1, opmode_out}, {dout} );
else
    en_bool = xSignal;
    en_conv = xBlock(struct('source', 'Convert', 'name', 'en_conv'), ...
        struct('arith_type', 'Boolean'), {en}, {en_bool} );
    
    dummy_din1 = xSignal;  
    
    dummy_din1_const = xBlock( struct('source', 'Constant', 'name', 'dummy_din1'), ...
        struct('arith_type', const_arith_type, 'n_bits', bit_width_out, 'bin_pt', in_bin_pt), ...
        {}, {dummy_din1});
    
    add_din1 = xSignal;
    din1_sel = xBlock(struct('source', 'Mux', 'name', 'din1_sel'), ...
        {}, {en_bool, dummy_din1, din1}, {add_din1});
    
    AddSub = xBlock(struct('source', 'AddSub', 'name', 'AddSub'), ... 
                           struct('latency', latency, ... 
                                  'precision', 'User Defined', ... 
                                  'arith_type', arith_type, ...
                                  'n_bits', bit_width_out, ... 
                                  'bin_pt', in_bin_pt), ... 
                           {din0, add_din1}, ... 
                           {dout});

end
    


end

