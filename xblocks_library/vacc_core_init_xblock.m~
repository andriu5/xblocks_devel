function vacc_core_init_xblock(varargin)

defaults = { ...
    'veclen', 32, ...
    'arith_type', 1, ...
    'out_bit_width', 32, ...
    'out_bin_pt', 7, ...
    'add_latency', 2, ...
    'bram_latency', 2, ...
    'mux_latency', 0};

veclen = get_var('veclen', 'defaults', defaults, varargin{:});
arith_type = get_var('arith_type', 'defaults', defaults, varargin{:});
out_bit_width = get_var('out_bit_width', 'defaults', defaults, varargin{:});
out_bin_pt = get_var('out_bin_pt', 'defaults', defaults, varargin{:});
add_latency = get_var('add_latency', 'defaults', defaults, varargin{:});
bram_latency = get_var('bram_latency', 'defaults', defaults, varargin{:});
mux_latency = get_var('mux_latency', 'defaults', defaults, varargin{:});

% veclen, arith_type, out_bit_width, out_bin_pt, add_latency, bram_latency, mux_latency, in_bin_pt)
%% inports
din = xInport('din');
acc_en = xInport('acc_en');

%% outports
dout = xOutport('dout');

%% diagram

% block: untitled/vacc/vacc_core_dsp481/BRAM
Counter_out1 = xSignal;
bram_din = xSignal;
Constant2_out1 = xSignal;
BRAM_out1 = xSignal;
BRAM = xBlock(struct('source', 'Single Port RAM', 'name', 'BRAM'), ...
                     struct('depth', 64, ...
                            'initVector', 0, ...
                            'write_mode', 'Read Before Write', ...
                            'latency', 2, ...
                            'use_rpm', 'off'), ...
                     {Counter_out1, bram_din, Constant2_out1}, ...
                     {BRAM_out1});

% block: untitled/vacc/vacc_core_dsp481/Concat
opmode_z_out1 = xSignal;
opmode_x_out1 = xSignal;
opmode = xSignal;
Concat = xBlock(struct('source', 'Concat', 'name', 'Concat'), ...
                       struct('num_inputs', 4), ...
                       {opmode_z_out1, acc_en, acc_en, opmode_x_out1}, ...
                       {opmode});

% block: untitled/vacc/vacc_core_dsp481/Constant2
Constant2 = xBlock(struct('source', 'Constant', 'name', 'Constant2'), ...
                          struct('arith_type', 'Boolean', ...
                                 'n_bits', 1, ...
                                 'bin_pt', 0, ...
                                 'explicit_period', 'on'), ...
                          {}, ...
                          {Constant2_out1});

% block: untitled/vacc/vacc_core_dsp481/Convert
Convert_out1 = xSignal;
Convert = xBlock(struct('source', 'Convert', 'name', 'Convert'), ...
                        struct('n_bits', 48, ...
                               'bin_pt', in_bin_pt), ...
                        {din}, ...
                        {Convert_out1});

% block: untitled/vacc/vacc_core_dsp481/Convert1
Reinterpret_out1 = xSignal;
Convert1 = xBlock(struct('source', 'Convert', 'name', 'Convert1'), ...
                         struct('n_bits', out_bit_width, ...
                                'bin_pt', in_bin_pt), ...
                         {Reinterpret_out1}, ...
                         {bram_din});

% block: untitled/vacc/vacc_core_dsp481/Convert2
Reinterpret4_out1 = xSignal;
Convert2_out1 = xSignal;
Convert2 = xBlock(struct('source', 'Convert', 'name', 'Convert2'), ...
                         struct('n_bits', 48, ...
                                'bin_pt', 0), ...
                         {Reinterpret4_out1}, ...
                         {Convert2_out1});

% block: untitled/vacc/vacc_core_dsp481/Convert3
Convert3 = xBlock(struct('source', 'Convert', 'name', 'Convert3'), ...
                         struct('n_bits', out_bit_width, ...
                                'bin_pt', out_bin_pt), ...
                         {bram_din}, ...
                         {dout});

% block: untitled/vacc/vacc_core_dsp481/DSP48E
Reinterpret1_out1 = xSignal;
Reinterpret2_out1 = xSignal;
alumode_out1 = xSignal;
carryin_out1 = xSignal;
carryinsel_out1 = xSignal;
DSP48E_out1 = xSignal;
DSP48E = xBlock(struct('source', 'DSP48E', 'name', 'DSP48E'), ...
                       struct('use_creg', 'on'), ...
                       {Reinterpret1_out1, Reinterpret2_out1, Convert2_out1, opmode, alumode_out1, carryin_out1, carryinsel_out1}, ...
                       {DSP48E_out1});

% block: untitled/vacc/vacc_core_dsp481/Reinterpret
Reinterpret = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret'), ...
                            struct('force_bin_pt', 'on', ...
                                   'bin_pt', in_bin_pt), ...
                            {DSP48E_out1}, ...
                            {Reinterpret_out1});

% block: untitled/vacc/vacc_core_dsp481/Reinterpret1
a_out1 = xSignal;
Reinterpret1 = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret1'), ...
                             struct('force_arith_type', 'on', ...
                                    'arith_type', 'Signed  (2''s comp)'), ...
                             {a_out1}, ...
                             {Reinterpret1_out1});

% block: untitled/vacc/vacc_core_dsp481/Reinterpret2
b_out1 = xSignal;
Reinterpret2 = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret2'), ...
                             struct('force_arith_type', 'on', ...
                                    'arith_type', 'Signed  (2''s comp)'), ...
                             {b_out1}, ...
                             {Reinterpret2_out1});

% block: untitled/vacc/vacc_core_dsp481/Reinterpret4
Reinterpret4 = xBlock(struct('source', 'Reinterpret', 'name', 'Reinterpret4'), ...
                             struct('arith_type', 'Signed  (2''s comp)', ...
                                    'force_bin_pt', 'on'), ...
                             {BRAM_out1}, ...
                             {Reinterpret4_out1});

% block: untitled/vacc/vacc_core_dsp481/a
a = xBlock(struct('source', 'Slice', 'name', 'a'), ...
                  struct('nbits', 30, ...
                         'mode', 'Lower Bit Location + Width', ...
                         'bit0', 18), ...
                  {Convert_out1}, ...
                  {a_out1});

% block: untitled/vacc/vacc_core_dsp481/alumode
alumode = xBlock(struct('source', 'Constant', 'name', 'alumode'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 0, ...
                               'n_bits', 4, ...
                               'bin_pt', 0, ...
                               'explicit_period', 'on'), ...
                        {}, ...
                        {alumode_out1});

% block: untitled/vacc/vacc_core_dsp481/b
b = xBlock(struct('source', 'Slice', 'name', 'b'), ...
                  struct('nbits', 18, ...
                         'mode', 'Lower Bit Location + Width'), ...
                  {Convert_out1}, ...
                  {b_out1});

% block: untitled/vacc/vacc_core_dsp481/carryin
carryin = xBlock(struct('source', 'Constant', 'name', 'carryin'), ...
                        struct('arith_type', 'Unsigned', ...
                               'const', 0, ...
                               'n_bits', 1, ...
                               'bin_pt', 0, ...
                               'explicit_period', 'on'), ...
                        {}, ...
                        {carryin_out1});

% block: untitled/vacc/vacc_core_dsp481/carryinsel
carryinsel = xBlock(struct('source', 'Constant', 'name', 'carryinsel'), ...
                           struct('arith_type', 'Unsigned', ...
                                  'const', 0, ...
                                  'n_bits', 3, ...
                                  'bin_pt', 0, ...
                                  'explicit_period', 'on'), ...
                           {}, ...
                           {carryinsel_out1});

% block: untitled/vacc/vacc_core_dsp481/opmode_x
opmode_x = xBlock(struct('source', 'Constant', 'name', 'opmode_x'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 3, ...
                                'n_bits', 2, ...
                                'bin_pt', 0, ...
                                'explicit_period', 'on'), ...
                         {}, ...
                         {opmode_x_out1});

% block: untitled/vacc/vacc_core_dsp481/opmode_z
opmode_z = xBlock(struct('source', 'Constant', 'name', 'opmode_z'), ...
                         struct('arith_type', 'Unsigned', ...
                                'const', 0, ...
                                'n_bits', 3, ...
                                'bin_pt', 0, ...
                                'explicit_period', 'on'), ...
                         {}, ...
                         {opmode_z_out1});



end

